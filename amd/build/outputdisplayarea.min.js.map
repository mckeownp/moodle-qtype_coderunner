{"version":3,"file":"outputdisplayarea.min.js","sources":["../src/outputdisplayarea.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more util.details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n/**\n * A module used for running code using the Coderunner webservice (CRWS) and displaying output. Originally\n * developed for use in the Scratchpad UI. It has three modes of operation:\n * - 'text': Just display the output as text, html escaped.\n * - 'json': The recommended way to display programs that use stdin or output images (or both).\n *      - Accepts JSON in the CRWS response output with fields:\n *          - \"returncode\": Error/return code from running program.\n *          - \"stdout\": Stdout text from running program.\n *          - \"stderr\": Error text from running program.\n *          - \"files\": An object containing filenames mapped to base64 encoded images.\n *                     These will be displayed below any stdout text.\n *      - When input from stdin is required the returncode 42 should be returned, raise this\n *        any time the program asks for input. An (html) input will be added after the last stdout received.\n *        When enter is pressed, runCode is called with value of the input added to the stdin string.\n *        This repeats until returncode is no longer 42.\n * - 'html': Display program output as raw html inside the output area.\n *      - This can be used to show images and insert other HTML tags (and beyond).\n *      - Giving an <input> tag the class 'coderunner-run-input' will add an event that\n *        on pressing enter will call the runCode method again with the value of that input field added to stdin.\n *        This method of receiving stdin is harder to use but more flexible than JSON, enter at your own risk.\n *\n * @module qtype_coderunner/outputdisplayarea\n * @copyright  James Napier, 2023, The University of Canterbury\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ajax from \"core/ajax\";\nimport { get_string } from \"core/str\";\n\nconst INPUT_INTERRUPT = 42;\nconst INPUT_CLASS = \"coderunner-run-input\";\nconst DEFAULT_DISPLAY_COLOUR = \"#eff\";\nconst ERROR_DISPLAY_COLOUR = \"#faa\";\nconst JSON_DISPLAY_PROPS = [\"returncode\", \"stdout\", \"stderr\", \"files\"];\n\n/**\n * Error codes returned by the CodeRunner sandbox web service\n */\nconst UNKNOWN_SERVER_ERROR = 7;\nconst SERVER_OVERLOAD   = 9;\n\n/**\n * RESULT status values from a direct call to a Jobe server\n */\nconst RESULT_RUNTIME_ERROR      = 12;\nconst RESULT_SUCCESS            = 15;\nconst RESULT_SERVER_OVERLOAD    = 21;\n\n\n/**\n * Retrieve a language string from qtype_coderunner.\n * @param {string} stringName of language string to retrieve.\n * @returns {string} a language string from qtype_coderunner.\n */\nconst getLangString = async (stringName) => {\n    const string = await get_string(stringName, \"qtype_coderunner\");\n    return string;\n};\n\n/**\n * Get the specified language string using. If callback is provided then pass\n * the language string into that function, otherwise plug it into the given node.\n * @param {Object} settings The settings\n * @param {string} settings.stringName The language string name to retrieve.\n * @param {Function} settings.callback Callback function, with langString as arg.\n * @param {Element} settings.node text area into which the error message should be plugged.\n * @example\n * // Set a div element's text to be a language string\n * setLangString({stringName: 'nooutput', node: div})\n * @example\n * // Set a div element's text to be a language string with *** on either side\n * setLangString setLangString({stringName: 'error_timeout', callback: (langString) => {\n *      div.innerText += `*** ${langString} ***\\n`;\n * }});\n */\nconst setLangString = async ({ stringName, callback, node }) => {\n    const langString = await getLangString(stringName);\n    if (callback instanceof Function) {\n        callback(langString);\n    } else {\n        node.innerText = langString;\n    }\n};\n\nconst diagnoseWebserviceResponse = (response) => {\n    // Table of error conditions.\n    // Each row is response.error, response.result, langstring\n    // response.result is ignored if response.error is non-zero.\n    // Any condition not in the table is deemed an \"Unknown runtime error\".\n    const ERROR_RESPONSES = [\n        [1, 0, \"error_access_denied\"], // Sandbox AUTH_ERROR\n        [2, 0, \"error_unknown_language\"], // Sandbox WRONG_LANG_ID\n        [3, 0, \"error_access_denied\"], // Sandbox ACCESS_DENIED\n        [4, 0, \"error_submission_limit_reached\"], // Sandbox SUBMISSION_LIMIT_EXCEEDED\n        [5, 0, \"error_sandbox_server_overload\"], // Sandbox SERVER_OVERLOAD\n        [0, 11, \"\"], // RESULT_COMPILATION_ERROR\n        [0, 12, \"\"], // RESULT_RUNTIME_ERROR\n        [0, 13, \"error_timeout\"], // RESULT TIME_LIMIT\n        [0, RESULT_SUCCESS, \"\"], // RESULT_SUCCESS\n        [0, 17, \"error_memory_limit\"], // RESULT_MEMORY_LIMIT\n        [0, 21, \"error_sandbox_server_overload\"], // RESULT_SERVER_OVERLOAD\n        [0, 30, \"error_excessive_output\"], // RESULT OUTPUT_LIMIT\n    ];\n    for (let i = 0; i < ERROR_RESPONSES.length; i++) {\n        let row = ERROR_RESPONSES[i];\n        if (row[0] == response.error && (response.error != 0 || response.result == row[1])) {\n            return row[2];\n        }\n    }\n    return \"error_unknown_runtime\"; // We're dead, Fred.\n};\n\n/**\n * Concatenates the cmpinfo, stdout and stderr fields of the sandbox\n * response, truncating both stdout and stderr to a given maximum length\n * if necessary (in which case '... (truncated)' is appended.\n * @param {object} response Sandbox response object\n */\nconst combinedOutput = (response) => {\n    return response.cmpinfo + response.output + response.stderr;\n};\n\n/**\n * Check whether obj has the properties in props, returns missing properties.\n * @param {object} obj to check properties of\n * @param {array} props to check for.\n * @returns {array} of missing properties.\n */\nconst missingProperties = (obj, props) => {\n    return props.filter((prop) => !obj.hasOwnProperty(prop));\n};\n\n/**\n * Insert a base64 encoded string into HTML image.\n * @param {string} base64 encoded string.\n * @param {string} type of encoded image file.\n * @returns {HTMLImageElement} image tag containing encoded image from string.\n */\nconst getImage = (base64, type = \"png\") => {\n    const image = document.createElement(\"img\");\n    image.src = `data:image/${type};base64,${base64}`;\n    return image;\n};\n\n/**\n * Constructor for OutputDisplayArea object. For use with the output_displayarea template.\n * @param {string} displayAreaId The id of the display area div, this should match the 'id'\n * from the template.\n * @param {string} outputMode The mode being used for output, must be text, html or json.\n * @param {string} lang The language to run code with.\n * @param {string} sandboxParams The sandbox params to run code with.\n */\nclass OutputDisplayArea {\n    constructor(displayAreaId, outputMode, lang, sandboxParams) {\n        this.displayAreaId = displayAreaId;\n        this.lang = lang;\n        this.mode = outputMode;\n        this.sandboxParams = sandboxParams;\n\n        this.textDisplay = document.getElementById(displayAreaId + \"-text\");\n        this.imageDisplay = document.getElementById(displayAreaId + \"-images\");\n\n        this.prevRunSettings = null;\n    }\n\n    /**\n     * Clear the display of any images and text.\n     */\n    clearDisplay() {\n        this.textDisplay.innerHTML = \"\";\n        this.imageDisplay.innerHTML = \"\";\n        this.textDisplay.style.backgroundColor = DEFAULT_DISPLAY_COLOUR;\n        this.imageDisplay.style.backgroundColor = DEFAULT_DISPLAY_COLOUR;\n    }\n\n    /**\n     * Display text from a CRWS response to the display (escaped).\n     * @param {object} response Coderunner webservice response JSON.\n     */\n    displayText(response) {\n        this.textDisplay.innerText = combinedOutput(response);\n    }\n\n    /**\n     * Display HTML from a CRWS response to the display (un-escaped).\n     * Find the first HTML input element with the input class and\n     * add event listeners to handle reading stdin.\n     * @param {object} response Coderunner webservice response JSON,\n     * with output field containing HTML.\n     */\n    displayHtml(response) {\n        this.textDisplay.innerHTML = combinedOutput(response);\n        const inputEl = this.textDisplay.querySelector(\".\" + INPUT_CLASS);\n        if (inputEl) {\n            this.addInputEvents(inputEl);\n        }\n    }\n\n    /**\n     * Display JSON from a CRWS response to the display.\n     * Assumes response.output will be a JSON with the fields:\n     *      - \"returncode\": Error/return code from running program.\n     *      - \"stdout\": Stdout text from running program.\n     *      - \"stderr\": Error text from running program.\n     *      - \"files\": An object containing filenames mapped to base64 encoded images.\n     *                 These will be displayed below any stdout text.\n     * NOTE: See file header/readme for more info.\n     * @param {object} response Coderunner webservice response JSON,\n     * with output field containing JSON string.\n     */\n    displayJson(response) {\n        const result = this.validateJson(response.output);\n        if (result === null) {\n            return;\n        } // Invalid JSON response received from wrapper.\n\n        let text = result.stdout;\n\n        if (result.returncode !== INPUT_INTERRUPT) {\n            text += result.stderr;\n        }\n        if (result.returncode == 13) {\n            // Timeout\n            setLangString({\n                stringName: \"error_timeout\",\n                callback: (langString) => {\n                    this.textDisplay.innerText += `*** ${langString} ***\\n`;\n                },\n            });\n        }\n\n        const numImages = this.displayImages(result.files);\n        if (text.trim() === \"\" && result.returncode !== INPUT_INTERRUPT) {\n            if (numImages == 0) {\n                this.displayNoOutput(null);\n            }\n        } else {\n            this.textDisplay.innerText = text;\n        }\n        if (result.returncode === INPUT_INTERRUPT) {\n            this.addInput();\n        }\n    }\n\n    /**\n     * Display an error message, with red background.\n     * Typically, these would be caused by the wrapper.\n     * But they can also happen when the webservice responds with an error.\n     * @param {string} error_msg to be displayed.\n     */\n    displayError(error_msg) {\n        this.textDisplay.style.backgroundColor = ERROR_DISPLAY_COLOUR;\n        this.textDisplay.innerText = error_msg;\n    }\n\n    /**\n     * Validate JSON to display, make sure it is valid json and has required fields.\n     * Return null if malformed JSON or or required fields are missing.\n     * @param {string} jsonString string of JSON to be displayed.\n     * @returns {object | null} JSON as object, or null if invalid.\n     */\n    validateJson(jsonString) {\n        let result = null;\n        try {\n            result = JSON.parse(jsonString);\n        } catch (e) {\n            setLangString({\n                stringName: \"outputdisplayarea_invalid_json\",\n                callback: (langString) => {\n                    this.displayError(`${langString}\\n` + `${jsonString}\\n` + `${e.message} \\n`);\n                },\n            });\n            return null;\n        }\n        const missing = missingProperties(result, JSON_DISPLAY_PROPS);\n        if (missing.length > 0) {\n            setLangString({\n                stringName: \"outputdisplayarea_missing_json_fields\",\n                callback: (langString) => {\n                    this.displayError(`${langString}\\n` + `${missing.join()}`);\n                },\n            });\n            return null;\n        }\n        return result;\n    }\n\n    /**\n     * Display no output message if no output to display or response is null.\n     * @param {object} response Coderunner webservice response JSON, set to null to force\n     * display of no output message.\n     */\n    displayNoOutput(response) {\n        const isNoOutput = response ? combinedOutput(response).length === 0 : true;\n        if (isNoOutput || response === null) {\n            const span = document.createElement(\"span\");\n            span.style.color = \"red\";\n            setLangString({ stringName: \"nooutput\", node: span });\n            this.clearDisplay();\n            this.textDisplay.append(span);\n        }\n        return isNoOutput;\n    }\n    /**\n     * Display response using the current display mode.\n     * @param {object} response Coderunner webservice response JSON.\n     */\n    display(response) {\n        const error = diagnoseWebserviceResponse(response);\n        if (error !== \"\") {\n            setLangString({\n                stringName: error,\n                callback: (langString) => {\n                    this.textDisplay.innerText = `*** ${langString} ***\\n`;\n                },\n            });\n            return;\n        }\n        if (this.displayNoOutput(response)) {\n            return;\n        }\n\n        if (this.mode === \"json\") {\n            this.displayJson(response);\n        } else if (this.mode === \"html\") {\n            this.displayHtml(response);\n        } else if (this.mode === \"text\") {\n            this.displayText(response);\n        } else {\n            setLangString({\n                stringName: \"outputdisplayarea_invalid_mode\",\n                callback: (langString) => {\n                    this.displayError(langString + \" \" + this.mode);\n                },\n            });\n        }\n    }\n\n    /**\n     * Run code using the Coderunner webservice and then display the output\n     * using the selected mode. This function uses AJAX to asynchronously run and\n     * display code.\n     * @param {string} code to be run.\n     * @param {string} stdin to be fed into the program.\n     * @param {boolean} shouldClearDisplay will reset the display before displaying.\n     * Use false when doing stdin runs.\n     */\n    runCode(code, stdin, shouldClearDisplay = false) {\n        this.prevRunSettings = [code, stdin];\n        if (shouldClearDisplay) {\n            this.clearDisplay();\n        }\n        ajax.call([\n            {\n                methodname: \"qtype_coderunner_run_in_sandbox\",\n                args: {\n                    contextid: M.cfg.contextid, // Moodle context ID\n                    sourcecode: code,\n                    language: this.lang,\n                    stdin: stdin,\n                    params: JSON.stringify(this.sandboxParams), // Sandbox params\n                },\n                done: (responseJson) => {\n                    const response = JSON.parse(responseJson);\n                    this.display(response);\n                },\n                fail: (error) => {\n                    this.displayError(error.message);\n                },\n            },\n        ]);\n    }\n\n    /**\n     * Run code by connecting directly with AJAX to one of the given Jobe\n     * servers, selected randomly.\n     * @param {string} code to be run.\n     * @param {string} stdin to be fed into the program.\n     * @param {list} jobeServers a non-empty list of jobe servers\n     * @param {list} apiKeys a possibly empty list of API keys for the jobe-servers\n     * @param {boolean} shouldClearDisplay will reset the display before displaying.\n     * Use false when doing stdin runs.\n     */\n    runCodeDirect(code, stdin, jobeServers, apiKeys, shouldClearDisplay = false) {\n        this.prevRunSettings = [code, stdin];\n        if (shouldClearDisplay) {\n            this.clearDisplay();\n        }\n        const lang = this.lang.toLowerCase();\n        const runspec = {\n            \"run_spec\": {\n                'language_id': lang,\n                'sourcecode': code,\n                'sourcefilename': lang === 'java' ? this.getJavaFilename(code) : `__tester__.${lang}`,\n                'input': stdin\n            }\n        };\n        const xhr = new XMLHttpRequest();\n        const t = this;\n        xhr.onreadystatechange = function() {\n            if (xhr.readyState == XMLHttpRequest.DONE) {\n                if (xhr.status === 200 || xhr.status === 203) {\n                    const sandboxResponse = t.convertToSandboxFormat(xhr.responseText);\n                    t.display(sandboxResponse);\n                } else {\n                    setLangString({\n                        stringName: 'scratchpad_ui_request_failed',\n                        callback: (langString) => {\n                            t.displayError(langString +  ` ${xhr.status}: ${xhr.statusText}. ${xhr.responseText}`);\n                        }\n                    });\n                }\n            }\n        };\n\n        xhr.onerror = function() {\n            setLangString({\n                stringName: 'scratchpad_ui_error',\n                callback: (langString) => {\n                    t.displayError(langString);\n                }\n            });\n        };\n\n        const index = Math.floor(Math.random() * jobeServers.length);\n        const jobeServer = jobeServers[index].toLowerCase();\n\n        if (!jobeServer.startsWith('http://') && !jobeServer.startsWith('https://')) {\n            setLangString({\n                stringName: 'scratchpad_ui_no_protocol',\n                callback: (langString) => {\n                    t.displayError(langString);\n                }\n            });\n        } else if (apiKeys && jobeServers.length != apiKeys.length) {\n            setLangString({\n                stringName: 'scratchpad_ui_bad_api_keys',\n                callback: (langString) => {\n                    t.displayError(langString);\n                }\n            });\n        } else {\n            xhr.open('POST', `${jobeServer}/jobe/index.php/restapi/runs`, true);\n            xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n            xhr.setRequestHeader('Accept', 'application/json');\n            if (apiKeys) {\n                xhr.setRequestHeader('X-API-KEY', apiKeys[index]);\n            }\n            xhr.send(JSON.stringify(runspec));\n        }\n    }\n\n    /**\n     * Try to come up with the right filename for a Java program by using regular\n     * expressions to find the main class. This is by no means guaranteed to work in all cases\n     * but it handles the most common ways of writing a Java program.\n     * @param {string} code The java sourcecode\n     * @return The main class name with '.java' appended.\n     */\n    getJavaFilename(code) {\n        // eslint-disable-next-line max-len\n        let pattern = /(^|\\W)public\\s+class\\s+(\\w+)[^{]*\\{.*?((public\\s([a-z]*\\s)*static)|(static\\s([a-z]*\\s)*public))\\s([a-z]*\\s)*void\\s+main\\s*\\(\\s*String/ms;\n        const matches = code.match(pattern);\n        if (!matches) {\n            return 'NO_PUBLIC_CLASS_FOUND.java';\n        } else {\n            return matches[2] + '.java';\n        }\n    }\n\n    /**\n     * Convert the response from a direct AJAX request to a web server to roughly match the\n     * object returned from a webservice request to the CodeRunner run-in-sandbox service.\n     * @param {string} responseText The JSON-encoded response from Jobe\n     */\n    convertToSandboxFormat(responseText) {\n        let response = '';\n        try {\n            response = JSON.parse(responseText);\n        } catch (e) {\n            return {\n                'error': UNKNOWN_SERVER_ERROR,\n                'stderr': `HTTP response was ${JSON.stringify(responseText)}`\n            };\n        }\n        if (response.outcome === RESULT_SERVER_OVERLOAD) {\n            return {\n                'error': SERVER_OVERLOAD\n            };\n        } else {\n            const stderr = response.stderr.trim();\n            return {\n                'error': 0,\n                'stderr': stderr,\n                'result': stderr ? RESULT_RUNTIME_ERROR : response.outcome,\n                'signal': 0,\n                'cmpinfo': response.cmpinfo,\n                'output': response.stdout\n            };\n        }\n    }\n\n\n    /**\n     * Add an input field with event listeners to support running again\n     * with new stdin entered by user.\n     */\n    addInput() {\n        const inputId = `${this.displayAreaId}-input-field`;\n        this.textDisplay.innerHTML += `<input type=\"text\" id=\"${inputId}\" class=\"${INPUT_CLASS}\">`;\n        const inputEl = document.getElementById(inputId);\n        setLangString({\n            stringName: \"enter_to_submit\",\n            callback: (langString) => {\n                inputEl.placeholder += langString;\n            },\n        });\n\n        this.addInputEvents(inputEl);\n    }\n\n    /**\n     * Add event listeners to inputEl overriding enter key to:\n     *  - Prevent form-submit.\n     *  - Call runCode again, adding value in inputEl to stdin.\n     * @param {HTMLInputElement} inputEl to add event listeners to.\n     */\n    addInputEvents(inputEl) {\n        inputEl.focus();\n\n        inputEl.addEventListener(\"keydown\", (e) => {\n            if (e.key === \"Enter\") {\n                e.preventDefault(); // Do NOT form submit.\n            }\n        });\n        inputEl.addEventListener(\"keyup\", (e) => {\n            if (e.key === \"Enter\") {\n                const line = inputEl.value;\n                inputEl.remove();\n                this.textDisplay.innterHTML += line; // Perhaps this should be sanitized.\n                this.prevRunSettings[1] += line + \"\\n\";\n                this.runCode(...this.prevRunSettings, false);\n            }\n        });\n    }\n\n    /**\n     * Take the files from a JSON response and display them.\n     * @param {object} files from response, in filename: filecontents pairs.\n     * @returns {number} number of images displayed.\n     */\n    displayImages(files) {\n        let numImages = 0;\n        for (const [fname, fcontents] of Object.entries(files)) {\n            const fileType = fname.split(\".\")[1];\n            if (fileType) {\n                const image = getImage(fcontents, fileType);\n                this.imageDisplay.append(image);\n                numImages += 1;\n            } else {\n                setLangString({\n                    stringName: \"outputdisplayarea_missing_image_extension\",\n                    callback: (langString) => {\n                        this.imageDisplay(`${langString} ` + fname);\n                    },\n                });\n            }\n        }\n        return numImages;\n    }\n}\n\nexport { OutputDisplayArea };\n"],"names":["e","_ajax","__esModule","default","JSON_DISPLAY_PROPS","setLangString","async","stringName","callback","node","_ref","langString","get_string","getLangString","Function","innerText","combinedOutput","response","cmpinfo","output","stderr","getImage","base64","type","arguments","length","undefined","image","document","createElement","src","_exports","OutputDisplayArea","constructor","displayAreaId","outputMode","lang","sandboxParams","this","mode","textDisplay","getElementById","imageDisplay","prevRunSettings","clearDisplay","innerHTML","style","backgroundColor","displayText","displayHtml","inputEl","querySelector","addInputEvents","displayJson","result","validateJson","text","stdout","returncode","numImages","displayImages","files","trim","displayNoOutput","addInput","displayError","error_msg","jsonString","JSON","parse","message","missing","obj","filter","prop","hasOwnProperty","missingProperties","join","isNoOutput","span","color","append","display","error","ERROR_RESPONSES","i","row","diagnoseWebserviceResponse","runCode","code","stdin","shouldClearDisplay","ajax","call","methodname","args","contextid","M","cfg","sourcecode","language","params","stringify","done","responseJson","fail","runCodeDirect","jobeServers","apiKeys","toLowerCase","runspec","run_spec","language_id","sourcefilename","getJavaFilename","input","xhr","XMLHttpRequest","t","onreadystatechange","readyState","DONE","status","sandboxResponse","convertToSandboxFormat","responseText","statusText","onerror","index","Math","floor","random","jobeServer","startsWith","open","setRequestHeader","send","matches","match","outcome","signal","inputId","placeholder","focus","addEventListener","key","preventDefault","line","value","remove","innterHTML","fname","fcontents","Object","entries","fileType","split"],"mappings":"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"}