{"version":3,"file":"ui_ace.min.js","sources":["../src/ui_ace.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript to interface to the Ace editor, which is used both in\n * the author editing page and by the student question submission page.\n * The class defined in this module is a plugin for the InterfaceWrapper class\n * declared in userinterfacewrapper.js. See that file for an explanation of\n * the interface to this module.\n *\n * A special case behaviour of the AceWrapper is that it needs to know\n * the Programming language that is being edited. This MUST be provided in\n * the constructor params parameter (an associative array) as a string\n * with key 'lang'.\n *\n * @module qtype_coderunner/ui_ace\n * @copyright  Richard Lobb, 2015, 2017, The University of Canterbury\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// Thanks to Ulrich Dangel for the initial implementation of Ace within\n// CodeRunner.\n\n// WARNING: The ace editor must have already been loaded before this\n// module is used, as it assumes window.ace exists.\n\ndefine(['jquery'], function($) {\n    const GLOBAL_THEME_KEY = 'qtype_coderunner.ace.theme';\n    const ACE_DARK_THEME = 'ace/theme/tomorrow_night';\n    const ACE_LIGHT_THEME = 'ace/theme/textmate';\n    /**\n     * Constructor for the Ace interface object.\n     * @param {string} textareaId The ID of the HTML textarea element to be wrapped.\n     * @param {int} w The width in pixels of the textarea.\n     * @param {int} h The height in pixels of the textarea.\n     * @param {object} params The UI parameter object.\n     */\n    function AceWrapper(textareaId, w, h, params) {\n        var textarea = $(document.getElementById(textareaId)),\n            wrapper = $(document.getElementById(textareaId + '_wrapper')),\n            focused = textarea[0] === document.activeElement,\n            lang = params.lang,\n            session,\n            code,\n            t = this;  // For embedded callbacks.\n\n        try {\n            window.ace.require(\"ace/ext/language_tools\");\n            this.modelist = window.ace.require('ace/ext/modelist');\n            this.textareaId = textareaId;\n            this.textarea = textarea;\n            this.enabled = false;\n            this.contents_changed = false;\n            this.capturingTab = false;\n            this.clickInProgress = false;\n\n            this.editNode = $(\"<div></div>\"); // Ace editor manages this\n            this.editNode.css({\n                resize: 'none',\n                height: h,\n                width: \"100%\"\n            });\n\n            this.editor = window.ace.edit(this.editNode.get(0));\n            if (textarea.prop('readonly')) {\n                this.editor.setReadOnly(true);\n            }\n\n            this.editor.setOptions({\n                enableBasicAutocompletion: true,\n                enableLiveAutocompletion: params.live_autocompletion,\n                fontSize: params.font_size ? params.font_size : \"14px\",\n                newLineMode: \"unix\",\n            });\n\n            this.editor.$blockScrolling = Infinity;\n\n            session = this.editor.getSession();\n            code = this.textarea.val();\n            if (params.import_from_scratchpad === undefined || params.import_from_scratchpad) {\n                code = this.extract_from_json_maybe(code);\n            }\n            session.setValue(code);\n\n            // If there's a user-defined theme in local storage, use that.\n            // Otherwise use the 'prefers-color-scheme' option if given or\n            // the question/system defaults if not.\n            const userTheme = window.localStorage.getItem(GLOBAL_THEME_KEY);\n            const consider_prefers = params.auto_switch_light_dark && window.matchMedia;\n            if (userTheme !== null) {\n                this.editor.setTheme(userTheme);\n            } else if (consider_prefers && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                this.editor.setTheme(ACE_DARK_THEME);\n            } else if (consider_prefers && window.matchMedia('(prefers-color-scheme: light)').matches) {\n                this.editor.setTheme(ACE_LIGHT_THEME);\n            }  else if (params.theme) {\n                this.editor.setTheme(\"ace/theme/\" + params.theme);\n            } else {\n                this.editor.setTheme(ACE_LIGHT_THEME);\n            }\n            this.currentTheme = this.editor.getTheme();\n\n            this.fixSlowLoad();\n\n            this.setLanguage(lang);\n\n            this.setEventHandlers(textarea);\n            this.set_ace_aria_label(this.editor.container);\n            this.captureTab();\n\n            // Try to tell Moodle about parts of the editor with z-index.\n            // It is hard to be sure if this is complete. ACE adds all its CSS using JavaScript.\n            // Here, we just deal with things that are known to cause a problem.\n            // Can't do these operations until editor has rendered. So ...\n            this.editor.renderer.on('afterRender', function() {\n                var gutter =  wrapper.find('.ace_gutter');\n                if (gutter.hasClass('moodle-has-zindex')) {\n                    return;  // So we only do what follows once.\n                }\n                gutter.addClass('moodle-has-zindex');\n\n                if (focused) {\n                    t.editor.focus();\n                    t.editor.navigateFileEnd();\n                }\n                t.aceLabel = wrapper.find('.answerprompt');\n                t.aceLabel.attr('for', 'ace_' + textareaId);\n\n                t.aceTextarea = wrapper.find('.ace_text-input');\n                t.aceTextarea.attr('id', 'ace_' + textareaId);\n            });\n\n            this.fail = false;\n        }\n        catch(err) {\n            // Something ugly happened. Probably ace editor hasn't been loaded\n            this.fail = true;\n        }\n    }\n\n    AceWrapper.prototype.set_ace_aria_label = function(editor_container) {\n        // Set the aria-label for the given Ace editor container to the\n        // language string ace_aria_label.\n        require(['core/str'], function(str) {\n            /**\n             * Get langString text via AJAX\n             */\n            str.get_string('ace_aria_label', 'qtype_coderunner').then(function(label) {\n                editor_container.setAttribute('aria-label', label);\n            });\n        });\n    };\n\n    AceWrapper.prototype.extract_from_json_maybe = function(code) {\n        // If the given code looks like JSON from the Scratchpad UI,\n        // extract and return the answer_code attribute.\n        try {\n            const jsonObj = JSON.parse(code);\n            code = jsonObj.answer_code[0];\n        } catch(err) {}\n\n        return code;\n    };\n\n    AceWrapper.prototype.failed = function() {\n        return this.fail;\n    };\n\n    AceWrapper.prototype.failMessage = function() {\n        return 'ace_ui_notready';\n    };\n\n    // Sync to TextArea\n    AceWrapper.prototype.sync = function() {\n        // The data is always sync'd to the text area. But here we use sync to\n        // poll the value of the current theme and record in browser local\n        // storage if the value for this particular Ace instance has changed\n        // from the current working theme (set by code),\n        // implying a user menu action. If that happens the global user theme\n        // is set and is subsequently used by all Ace windows.\n        const thisThemeNow = this.editor.getTheme();\n        const globalTheme = window.localStorage.getItem(GLOBAL_THEME_KEY);\n        if (thisThemeNow !== this.currentTheme) {\n            // User has changed the theme via menu. Record in global storage so\n            // other editor instances can switch to it.\n            this.currentTheme = thisThemeNow;\n            window.localStorage.setItem(GLOBAL_THEME_KEY, thisThemeNow);\n            // console.log(`Menu theme change. Global theme now ${thisThemeNow}`);\n        } else if (globalTheme && thisThemeNow != globalTheme) {\n            // Another window has set the theme (since if there had been a\n            // global theme when we started, we'd have used it.\n            this.editor.setTheme(globalTheme);\n            this.currentTheme = globalTheme;\n            // console.log(`Global theme change found: ${globalTheme}`);\n        }\n    };\n\n    AceWrapper.prototype.syncIntervalSecs = function() {\n        return 2;\n    };\n\n    AceWrapper.prototype.setLanguage = function(language) {\n        var session = this.editor.getSession(),\n            mode = this.findMode(language);\n        if (mode) {\n            session.setMode(mode.mode);\n        }\n    };\n\n    AceWrapper.prototype.getElement = function() {\n        return this.editNode;\n    };\n\n    AceWrapper.prototype.captureTab = function () {\n        this.capturingTab = true;\n        this.editor.commands.bindKeys({'Tab': 'indent', 'Shift-Tab': 'outdent'});\n    };\n\n    AceWrapper.prototype.releaseTab = function () {\n        this.capturingTab = false;\n        this.editor.commands.bindKeys({'Tab': null, 'Shift-Tab': null});\n    };\n\n    // Sometimes Ace editors do not load until the mouse is moved. To fix this,\n    // 'move' the mouse using JQuery when the editor div enters the viewport.\n    AceWrapper.prototype.fixSlowLoad = function () {\n        const observer = new IntersectionObserver( () => {\n            $(document).trigger('mousemove');\n        });\n        const editNode = this.editNode.get(0); // Non-JQuerry node.\n        observer.observe(editNode);\n    };\n\n    AceWrapper.prototype.setEventHandlers = function () {\n        var TAB = 9,\n            ESC = 27,\n            KEY_M = 77,\n            t = this;\n\n        this.editor.getSession().on('change', function() {\n            t.textarea.val(t.editor.getSession().getValue());\n            t.contents_changed = true;\n        });\n\n        this.editor.on('blur', function() {\n            if (t.contents_changed) {\n                t.textarea.trigger('change');\n            }\n        });\n\n        this.editor.on('mousedown', function() {\n            // Event order seems to be (\\ is where the mouse button is pressed, / released):\n            // Chrome: \\ mousedown, mouseup, focusin / click.\n            // Firefox/IE: \\ mousedown, focusin / mouseup, click.\n            t.clickInProgress = true;\n        });\n\n        this.editor.on('focus', function() {\n            if (t.clickInProgress) {\n                t.captureTab();\n            } else {\n                t.releaseTab();\n            }\n        });\n\n        this.editor.on('click', function() {\n            t.clickInProgress = false;\n        });\n\n        this.editor.container.addEventListener('keydown', function(e) {\n            if (e.which === undefined || e.which !== 0) { // Normal keypress?\n                if (e.keyCode === KEY_M && e.ctrlKey && !e.altKey) {\n                    if (t.capturingTab) {\n                        t.releaseTab();\n                    } else {\n                        t.captureTab();\n                    }\n                    e.preventDefault(); // Firefox uses this for mute audio in current browser tab.\n                }\n                else if (e.keyCode === ESC) {\n                    t.releaseTab();\n                }\n                else if (!(e.shiftKey || e.ctrlKey || e.altKey || e.keyCode == TAB)) {\n                    t.captureTab();\n                }\n            }\n        }, true);\n    };\n\n    AceWrapper.prototype.destroy = function () {\n        var focused;\n        if (!this.fail) {\n            // Proceed only if this wrapper was correctly constructed\n            focused = this.editor.isFocused();\n            this.textarea.val(this.editor.getSession().getValue()); // Copy data back\n            this.editor.destroy();\n            $(this.editNode).remove();\n            if (focused) {\n                this.textarea.focus();\n                this.textarea[0].selectionStart = this.textarea[0].value.length;\n            }\n        }\n    };\n\n    AceWrapper.prototype.hasFocus = function() {\n        return this.editor.isFocused();\n    };\n\n    AceWrapper.prototype.findMode = function (language) {\n        var candidate,\n            filename,\n            result,\n            candidates = [], // List of candidate modes.\n            nameMap = {\n                'octave': 'matlab',\n                'nodejs': 'javascript',\n                'c#': 'cs',\n                'pypy3': 'python'\n            };\n\n        if (typeof language !== 'string') {\n            return undefined;\n        }\n        if (language.toLowerCase() in nameMap) {\n            language = nameMap[language.toLowerCase()];\n        }\n\n        candidates = [language, language.replace(/\\d+$/, \"\")];\n        for (var i = 0; i < candidates.length; i++) {\n            candidate = candidates[i];\n            filename = \"input.\" + candidate;\n            result = this.modelist.modesByName[candidate] ||\n                this.modelist.modesByName[candidate.toLowerCase()] ||\n                this.modelist.getModeForPath(filename) ||\n                this.modelist.getModeForPath(filename.toLowerCase());\n\n            if (result && result.name !== 'text') {\n                return result;\n            }\n        }\n        return undefined;\n    };\n\n    AceWrapper.prototype.resize = function(w, h) {\n        this.editNode.outerHeight(h);\n        this.editNode.outerWidth(w);\n        this.editor.resize();\n    };\n\n    /**\n     * Allow fullscreen mode for the Ace editor.\n     *\n     * @return {Boolean} True if fullscreen mode is allowed, false otherwise.\n     */\n    AceWrapper.prototype.allowFullScreen = function() {\n        return true;\n    };\n\n     return {\n        Constructor: AceWrapper\n    };\n});\n"],"names":["define","$","AceWrapper","textareaId","w","h","params","session","code","textarea","document","getElementById","wrapper","focused","activeElement","lang","t","this","window","ace","require","modelist","enabled","contents_changed","capturingTab","clickInProgress","editNode","css","resize","height","width","editor","edit","get","prop","setReadOnly","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","live_autocompletion","fontSize","font_size","newLineMode","$blockScrolling","Infinity","getSession","val","undefined","import_from_scratchpad","extract_from_json_maybe","setValue","userTheme","localStorage","getItem","consider_prefers","auto_switch_light_dark","matchMedia","setTheme","matches","theme","currentTheme","getTheme","fixSlowLoad","setLanguage","setEventHandlers","set_ace_aria_label","container","captureTab","renderer","on","gutter","find","hasClass","addClass","focus","navigateFileEnd","aceLabel","attr","aceTextarea","fail","err","prototype","editor_container","str","get_string","then","label","setAttribute","JSON","parse","answer_code","failed","failMessage","sync","thisThemeNow","globalTheme","setItem","syncIntervalSecs","language","mode","findMode","setMode","getElement","commands","bindKeys","releaseTab","observer","IntersectionObserver","trigger","observe","getValue","addEventListener","e","which","keyCode","ctrlKey","altKey","preventDefault","shiftKey","destroy","isFocused","remove","selectionStart","value","length","hasFocus","candidate","filename","result","candidates","nameMap","toLowerCase","replace","i","modesByName","getModeForPath","name","outerHeight","outerWidth","allowFullScreen","Constructor"],"mappings":"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"}