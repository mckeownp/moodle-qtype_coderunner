{"version":3,"file":"ui_ace_gapfiller.min.js","sources":["../src/ui_ace_gapfiller.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more util.details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Implementation of the ace_gapfiller_ui user interface plugin. For overall details\n * of the UI plugin architecture, see userinterfacewrapper.js.\n *\n * This plugin uses the usual ace editor but only makes some portions of the text editable.\n * The pre-formatted text is supplied by the question author in either the\n * \"globalextra\" field or the testcode field of the first test case, according\n * to the ui parameter ui_source (default: globalextra).\n * Editable \"gaps\" are inserted into the ace editor at specified points.\n * It is intended primarily for use with coding questions where the answerbox presents\n * the students with code that has smallish bits missing.\n *\n * The locations within the globalextra text at which the gaps are\n * to be inserted are denoted by \"tags\" of the form\n *\n *     {[ size ]}\n *\n * or\n *\n *     {[ size-maxSize ]}\n *\n * where size and maxSize are integer literals. These respectively inject a \"gap\" into\n * the editor of the specified size and maxSize. If maxSize is not specified then the\n * \"gap\" has no maximum size and can grow without bound.\n *\n * The serialisation of the answer box contents, i.e. the text that\n * copied back into the textarea for submissions\n * as the answer, is simply a list of all the field values (strings), in order.\n *\n * As a special case of the serialisation, if the value list is empty, the\n * serialisation itself is the empty string.\n *\n * The delimiters for the gap tags are by default '{[' and\n * ']}'.\n *\n * @module qtype_coderunner/ui_ace_gapfiller\n * @copyright  Richard Lobb, 2019, The University of Canterbury\n * @copyright  Matthew Toohey, 2021, The University of Canterbury\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery'], function($) {\n\n    var Range;  // Can't load this until ace has loaded.\n    const fillChar = \" \";\n    const validChars = /[ !\"#$%&'()*+,`\\-./0-9\\p{L}:;<=>?@\\[\\]\\\\^_{}|~]/u;\n    const ACE_LIGHT_THEME = 'ace/theme/textmate';\n\n    /**\n     * Constructor for the Ace interface object\n     * @param {string} textareaId The ID of the textarea html element.\n     * @param {int} w The width of the text area in pixels.\n     * @param {int} h The height of the text area in pixels.\n     * @param {object} uiParams The UI parameter specifier object.\n     */\n    function AceGapfillerUi(textareaId, w, h, uiParams) {\n        this.textArea = $(document.getElementById(textareaId));\n        var wrapper = $(document.getElementById(textareaId + '_wrapper')),\n            focused = this.textArea[0] === document.activeElement,\n            lang = uiParams.lang,\n            t = this;  // For embedded callbacks.\n\n        let code = \"\";\n        this.uiParams = uiParams;\n        this.gaps = [];\n        this.source = uiParams.ui_source || 'globalextra';\n        this.nextGapIndex = 0;\n        if (this.source !== 'globalextra' && this.source !== 'test0') {\n            alert('Invalid source for code in ui_ace_gapfiller');\n            this.source = 'globalextra';\n        }\n        if (this.source == 'globalextra') {\n            code = this.textArea.attr('data-globalextra');\n        } else {\n            code = this.textArea.attr('data-test0');\n        }\n\n        try {\n            window.ace.require(\"ace/ext/language_tools\");\n            Range = window.ace.require(\"ace/range\").Range;\n            this.modelist = window.ace.require('ace/ext/modelist');\n\n            this.enabled = false;\n            this.contents_changed = false;\n            this.capturingTab = false;\n            this.clickInProgress = false;\n\n            this.editNode = $(\"<div></div>\"); // Ace editor manages this\n            this.editNode.css({\n                resize: 'none',\n                height: h,\n                width: \"100%\"\n            });\n\n            this.editor = window.ace.edit(this.editNode.get(0));\n            if (this.textArea.prop('readonly')) {\n                this.editor.setReadOnly(true);\n            }\n\n            this.editor.setOptions({\n                displayIndentGuides: false,\n                dragEnabled: false,\n                enableBasicAutocompletion: true,\n                newLineMode: \"unix\",\n            });\n            this.editor.$blockScrolling = Infinity;\n\n            // Use the uiParams theme if provided else use light.\n            if (uiParams.theme) {\n                this.editor.setTheme(\"ace/theme/\" + uiParams.theme);\n            } else {\n                this.editor.setTheme(ACE_LIGHT_THEME);\n            }\n\n            this.setLanguage(lang);\n\n            this.setEventHandlers(this.textArea);\n            this.captureTab();\n\n            // Try to tell Moodle about parts of the editor with z-index.\n            // It is hard to be sure if this is complete. ACE adds all its CSS using JavaScript.\n            // Here, we just deal with things that are known to cause a problem.\n            // Can't do these operations until editor has rendered. So ...\n            this.editor.renderer.on('afterRender', function() {\n                var gutter =  wrapper.find('.ace_gutter');\n                if (gutter.hasClass('moodle-has-zindex')) {\n                    return;  // So we only do what follows once.\n                }\n                gutter.addClass('moodle-has-zindex');\n\n                if (focused) {\n                    t.editor.focus();\n                    t.editor.navigateFileEnd();\n                }\n                t.aceLabel = wrapper.find('.answerprompt');\n                t.aceLabel.attr('for', 'ace_' + textareaId);\n\n                t.aceTextarea = wrapper.find('.ace_text-input');\n                t.aceTextarea.attr('id', 'ace_' + textareaId);\n            });\n\n            this.createGaps(code);\n\n            // Intercept commands sent to ace.\n            this.editor.commands.on(\"exec\", function(e) {\n                let cursor = t.editor.selection.getCursor();\n                let commandName = e.command.name;\n                let selectionRange = t.editor.getSelectionRange();\n\n                let gap = t.findCursorGap(cursor);\n\n                if (commandName.startsWith(\"go\")) {  // If command just moves the cursor then do nothing.\n                    if (gap !== null && commandName === \"gotoright\" && cursor.column === gap.range.start.column+gap.textSize) {\n                        // In this case we jump out of gap over the empty space that contains nothing that the user has entered.\n                        t.editor.moveCursorTo(cursor.row, gap.range.end.column+1);\n                    } else {\n                        return;\n                    }\n                }\n\n                if (gap === null) {\n                    // Not in a gap\n                    if (commandName === \"selectall\") {\n                        t.editor.selection.selectAll();\n                    }\n\n                } else if (commandName === \"indent\") {\n                    // Instead of indenting, move to next gap.\n                    let nextGap = t.gaps[(gap.index+1) % t.gaps.length];\n                    t.editor.moveCursorTo(nextGap.range.start.row, nextGap.range.start.column+nextGap.textSize);\n                    t.editor.selection.clearSelection(); // Clear selection.\n\n                } else if (commandName === \"selectall\") {\n                    // Select all text in a gap if we are in a gap.\n                    t.editor.selection.setSelectionRange(new Range(gap.range.start.row,\n                                                         gap.range.start.column,\n                                                         gap.range.start.row,\n                                                         gap.range.end.column), false);\n\n                } else if (t.editor.selection.isEmpty()) {\n                    // User is not selecting multiple characters.\n                    if (commandName === \"insertstring\") {\n                        let char = e.args;\n                        // Only allow user to insert 'valid' chars.\n                        if (validChars.test(char)) {\n                            gap.insertChar(t.gaps, cursor, char);\n                        }\n                    } else if (commandName === \"backspace\") {\n                        // Only delete chars that are actually in the gap.\n                        if (cursor.column > gap.range.start.column && gap.textSize > 0) {\n                            gap.deleteChar(t.gaps, {row: cursor.row, column: cursor.column-1});\n                        }\n                    } else if (commandName === \"del\") {\n                        // Only delete chars that are actually in the gap.\n                        if (cursor.column < gap.range.start.column + gap.textSize && gap.textSize > 0) {\n                            gap.deleteChar(t.gaps, cursor);\n                        }\n                    }\n                    t.editor.selection.clearSelection(); // Keep selection clear.\n\n                } else if (!t.editor.selection.isEmpty() && gap.cursorInGap(selectionRange.start)\n                           && gap.cursorInGap(selectionRange.end)) {\n                    // User is selecting multiple characters and is in a gap.\n\n                    // These are the commands that remove the selected text.\n                    if (commandName === \"insertstring\" || commandName === \"backspace\"\n                        || commandName === \"del\" || commandName === \"paste\"\n                        || commandName === \"cut\") {\n\n                        gap.deleteRange(t.gaps, selectionRange.start.column, selectionRange.end.column);\n                        t.editor.selection.clearSelection(); // Clear selection.\n                    }\n\n                    if (commandName === \"insertstring\") {\n                        let char = e.args;\n                        if (validChars.test(char)) {\n                            gap.insertChar(t.gaps, selectionRange.start, char);\n                        }\n                    }\n                }\n\n                // Paste text into gap.\n                if (gap !== null && commandName === \"paste\") {\n                    gap.insertText(t.gaps, selectionRange.start.column, e.args.text);\n                }\n\n                e.preventDefault();\n                e.stopPropagation();\n            });\n\n            // Move cursor to where it should be if we click on a gap.\n            t.editor.selection.on('changeCursor', function() {\n                let cursor = t.editor.selection.getCursor();\n                let gap = t.findCursorGap(cursor);\n                if (gap !== null) {\n                    if (cursor.column > gap.range.start.column+gap.textSize) {\n                        t.editor.moveCursorTo(gap.range.start.row, gap.range.start.column+gap.textSize);\n                    }\n                }\n            });\n\n            this.gapToSelect = null;    // Stores gap that has been selected with triple click.\n\n            // Select all text in gap on triple click within gap.\n            this.editor.on(\"tripleclick\", function(e) {\n                let cursor = t.editor.selection.getCursor();\n                let gap = t.findCursorGap(cursor);\n                if (gap !== null) {\n                    t.editor.selection.setSelectionRange(new Range(gap.range.start.row,\n                                                                   gap.range.start.column,\n                                                                   gap.range.start.row,\n                                                                   gap.range.end.column), false);\n                    t.gapToSelect = gap;\n                    e.preventDefault();\n                    e.stopPropagation();\n                }\n            });\n\n            // Annoying hack to ensure the tripple click thing works.\n            this.editor.on(\"click\", function(e) {\n                if (t.gapToSelect) {\n                    t.editor.moveCursorTo(t.gapToSelect.range.start.row, t.gapToSelect.range.start.column+t.gapToSelect.textSize);\n                    t.gapToSelect = null;\n                    e.preventDefault();\n                    e.stopPropagation();\n                }\n            });\n\n            this.fail = false;\n            this.reload();\n        }\n        catch(err) {\n            // Something ugly happened. Probably ace editor hasn't been loaded\n            this.fail = true;\n        }\n    }\n\n    /**\n     * The method that creates the gaps at all places containing the appropriate\n     * marker (default {[ ... ]}).\n     * Do not call until after this.editor has been instantiated.\n     * @param {string} code The initial raw text code\n     */\n    AceGapfillerUi.prototype.createGaps = function(code) {\n        this.gaps = [];\n        /**\n         * Escape special characters in a given string.\n         * @param {string} s The input string.\n         * @returns {string} The updated string, with escaped specials.\n         */\n        function reEscape(s) {\n            var c, specials = '{[(*+\\\\', result='';\n            for (var i = 0; i < s.length; i++) {\n                c = s[i];\n                for (var j = 0; j < specials.length; j++) {\n                    if (c === specials[j]) {\n                        c = '\\\\' + c;\n                    }\n                }\n                result += c;\n            }\n            return result;\n        }\n\n        let lines = code.split(/\\r?\\n/);\n\n        let sepLeft = reEscape('{[');\n        let sepRight = reEscape(']}');\n        let splitter = new RegExp(sepLeft + ' *((?:\\\\d+)|(?:\\\\d+- *\\\\d+)) *' + sepRight);\n\n        let editorContent = \"\";\n        for (let i = 0; i < lines.length; i++) {\n            let bits = lines[i].split(splitter);\n            editorContent += bits[0];\n\n            let columnPos = bits[0].length;\n            for (let j = 1; j < bits.length; j += 2) {\n                let values = bits[j].split('-');\n                let minWidth = parseInt(values[0]);\n                let maxWidth = (values.length > 1 ? parseInt(values[1]) : Infinity);\n\n                // Create new gap.\n                let gap = new Gap(this.editor, i, columnPos, minWidth, maxWidth);\n                gap.index = this.nextGapIndex;\n                this.nextGapIndex += 1;\n                this.gaps.push(gap);\n\n                columnPos += minWidth;\n                editorContent += ' '.repeat(minWidth);\n                if (j + 1 < bits.length) {\n                    editorContent += bits[j+1];\n                    columnPos += bits[j+1].length;\n                }\n\n            }\n\n            if (i < lines.length-1) {\n                editorContent += '\\n';\n            }\n        }\n        this.editor.session.setValue(editorContent);\n    };\n\n    /**\n     * Return the gap that the cursor is in. This will actually return a gap if\n     * the cursor is 1 outside the gap as this will be needed for\n     * backspace/insertion to work. Rigth now this is done as a simple\n     * linear search but could be improved later.\n     * @param {object} cursor The ace editor cursor position.\n     * @returns {object} The gap that the cursor is current in, or null otherwise.\n     */\n    AceGapfillerUi.prototype.findCursorGap = function(cursor) {\n        for (let i=0; i < this.gaps.length; i++) {\n            let gap = this.gaps[i];\n            if (gap.cursorInGap(cursor)) {\n                return gap;\n            }\n        }\n        return null;\n    };\n\n    AceGapfillerUi.prototype.failed = function() {\n        return this.fail;\n    };\n\n    AceGapfillerUi.prototype.failMessage = function() {\n        return 'ace_ui_notready';\n    };\n\n\n    // Sync to TextArea\n    AceGapfillerUi.prototype.sync = function() {\n        if (this.fail) {\n            return; // Leave the text area alone if Ace load failed.\n        }\n        let serialisation = [];  // A list of field values.\n        let empty = true;\n\n        for (let i=0; i < this.gaps.length; i++) {\n            let gap = this.gaps[i];\n            let value = gap.getText();\n            serialisation.push(value);\n            if (value !== \"\") {\n                empty = false;\n            }\n        }\n        if (empty) {\n            this.textArea.val('');\n        } else {\n            this.textArea.val(JSON.stringify(serialisation));\n        }\n    };\n\n    // Sync every 2 seconds in case quiz closes automatically without user\n    // action.\n    AceGapfillerUi.prototype.syncIntervalSecs = (() => 2);\n\n    // Reload the HTML fields from the given serialisation.\n    AceGapfillerUi.prototype.reload = function() {\n        let content = this.textArea.val();\n        if (content) {\n            try {\n                let values = JSON.parse(content);\n                for (let i = 0; i < this.gaps.length; i++) {\n                    let value = i < values.length ? values[i]: '???';\n                    this.gaps[i].insertText(this.gaps, this.gaps[i].range.start.column, value);\n                }\n            } catch(e) {\n                // Just ignore errors\n            }\n        }\n    };\n\n    AceGapfillerUi.prototype.setLanguage = function(language) {\n        var session = this.editor.getSession(),\n            mode = this.findMode(language);\n        if (mode) {\n            session.setMode(mode.mode);\n        }\n    };\n\n    AceGapfillerUi.prototype.getElement = function() {\n        return this.editNode;\n    };\n\n    AceGapfillerUi.prototype.captureTab = function () {\n        this.capturingTab = true;\n        this.editor.commands.bindKeys({'Tab': 'indent', 'Shift-Tab': 'outdent'});\n    };\n\n    AceGapfillerUi.prototype.releaseTab = function () {\n        this.capturingTab = false;\n        this.editor.commands.bindKeys({'Tab': null, 'Shift-Tab': null});\n    };\n\n    AceGapfillerUi.prototype.setEventHandlers = function () {\n        var TAB = 9,\n            ESC = 27,\n            KEY_M = 77,\n            t = this;\n\n        this.editor.getSession().on('change', function() {\n            t.contents_changed = true;\n        });\n\n        this.editor.on('blur', function() {\n            if (t.contents_changed) {\n                t.textArea.trigger('change');\n            }\n        });\n\n        this.editor.on('mousedown', function() {\n            // Event order seems to be (\\ is where the mouse button is pressed, / released):\n            // Chrome: \\ mousedown, mouseup, focusin / click.\n            // Firefox/IE: \\ mousedown, focusin / mouseup, click.\n            t.clickInProgress = true;\n        });\n\n        this.editor.on('focus', function() {\n            if (t.clickInProgress) {\n                t.captureTab();\n            } else {\n                t.releaseTab();\n            }\n        });\n\n        this.editor.on('click', function() {\n            t.clickInProgress = false;\n        });\n\n        this.editor.container.addEventListener('keydown', function(e) {\n            if (e.which === undefined || e.which !== 0) { // Normal keypress?\n                if (e.keyCode === KEY_M && e.ctrlKey && !e.altKey) {\n                    if (t.capturingTab) {\n                        t.releaseTab();\n                    } else {\n                        t.captureTab();\n                    }\n                    e.preventDefault(); // Firefox uses this for mute audio in current browser tab.\n                }\n                else if (e.keyCode === ESC) {\n                    t.releaseTab();\n                }\n                else if (!(e.shiftKey || e.ctrlKey || e.altKey || e.keyCode == TAB)) {\n                    t.captureTab();\n                }\n            }\n        }, true);\n    };\n\n    AceGapfillerUi.prototype.destroy = function () {\n        this.sync();\n        var focused;\n        if (!this.fail) {\n            // Proceed only if this wrapper was correctly constructed\n            focused = this.editor.isFocused();\n            this.editor.destroy();\n            $(this.editNode).remove();\n            if (focused) {\n                this.textArea.focus();\n                this.textArea[0].selectionStart = this.textArea[0].value.length;\n            }\n        }\n    };\n\n    AceGapfillerUi.prototype.hasFocus = function() {\n        return this.editor.isFocused();\n    };\n\n    AceGapfillerUi.prototype.findMode = function (language) {\n        var candidate,\n            filename,\n            result,\n            candidates = [], // List of candidate modes.\n            nameMap = {\n                'octave': 'matlab',\n                'nodejs': 'javascript',\n                'c#': 'cs'\n            };\n\n        if (typeof language !== 'string') {\n            return undefined;\n        }\n        if (language.toLowerCase() in nameMap) {\n            language = nameMap[language.toLowerCase()];\n        }\n\n        candidates = [language, language.replace(/\\d+$/, \"\")];\n        for (var i = 0; i < candidates.length; i++) {\n            candidate = candidates[i];\n            filename = \"input.\" + candidate;\n            result = this.modelist.modesByName[candidate] ||\n                this.modelist.modesByName[candidate.toLowerCase()] ||\n                this.modelist.getModeForPath(filename) ||\n                this.modelist.getModeForPath(filename.toLowerCase());\n\n            if (result && result.name !== 'text') {\n                return result;\n            }\n        }\n        return undefined;\n    };\n\n    AceGapfillerUi.prototype.resize = function(w, h) {\n        this.editNode.outerHeight(h);\n        this.editNode.outerWidth(w);\n        this.editor.resize();\n    };\n\n    /**\n     * Allow fullscreen mode for the Ace Gapfiller UI.\n     *\n     * @return {Boolean} True if fullscreen mode is allowed, false otherwise.\n     */\n    AceGapfillerUi.prototype.allowFullScreen = function() {\n        return true;\n    };\n\n    /**\n     * Constructor for the Gap object that represents a gap in the source code\n     * that the user is expected to fill.\n     * @param {object} editor The Ace Editor object.\n     * @param {int} row The row within the text of the gap.\n     * @param {int} column The column within the text of the gap.\n     * @param {int} minWidth The minimum width (in characters) of the gap.\n     * @param {int} maxWidth The maximum width (in characters) of the gap.\n     */\n    function Gap(editor, row, column, minWidth, maxWidth=Infinity) {\n        this.editor = editor;\n\n        this.minWidth = minWidth;\n        this.maxWidth = maxWidth;\n\n        this.range = new Range(row, column, row, column+minWidth);\n        this.textSize = 0;\n\n        // Create markers\n        this.editor.session.addMarker(this.range, \"ace-gap-outline\", \"text\", true);\n        this.editor.session.addMarker(this.range, \"ace-gap-background\", \"text\", false);\n        const startPosition = this.range.start;\n        this.editor.session.insert(startPosition, \"<!-- BEGIN CODE GAP -->\");\n    }\n\n    Gap.prototype.cursorInGap = function(cursor) {\n        return (cursor.row >= this.range.start.row && cursor.column >= this.range.start.column &&\n                cursor.row <= this.range.end.row && cursor.column <= this.range.end.column);\n    };\n\n    Gap.prototype.getWidth = function() {\n        return (this.range.end.column-this.range.start.column);\n    };\n\n    Gap.prototype.changeWidth = function(gaps, delta) {\n        this.range.end.column += delta;\n\n        // Update any gaps that come after this one on the same line\n        for (let i=0; i < gaps.length; i++) {\n            let other = gaps[i];\n            if (other.range.start.row === this.range.start.row && other.range.start.column > this.range.start.column) {\n                other.range.start.column += delta;\n                other.range.end.column += delta;\n            }\n        }\n\n        this.editor.$onChangeBackMarker();\n        this.editor.$onChangeFrontMarker();\n    };\n\n    Gap.prototype.insertChar = function(gaps, pos, char) {\n        if (this.textSize === this.getWidth() && this.getWidth() < this.maxWidth) {    // Grow the size of gap and insert char.\n            this.changeWidth(gaps, 1);\n            this.textSize += 1;  // Important to record that texSize has increased before insertion.\n            this.editor.session.insert(pos, char);\n        } else if (this.textSize < this.maxWidth) {   // Insert char.\n            this.editor.session.remove(new Range(pos.row, this.range.end.column-1, pos.row, this.range.end.column));\n            this.textSize += 1;  // Important to record that texSize has increased before insertion.\n            this.editor.session.insert(pos, char);\n        }\n    };\n\n    Gap.prototype.deleteChar = function(gaps, pos) {\n        this.textSize -= 1;\n        this.editor.session.remove(new Range(pos.row, pos.column, pos.row, pos.column+1));\n\n        if (this.textSize >= this.minWidth) {\n            this.changeWidth(gaps, -1);  // Shrink the size of the gap.\n        } else {\n            // Put new space at end so everything is shifted across.\n            this.editor.session.insert({row: pos.row, column: this.range.end.column-1}, fillChar);\n        }\n    };\n\n    Gap.prototype.deleteRange = function(gaps, start, end) {\n        for (let i = start; i < end; i++) {\n            if (start < this.range.start.column+this.textSize) {\n                this.deleteChar(gaps, {row: this.range.start.row, column: start});\n            }\n        }\n    };\n\n    Gap.prototype.insertText = function(gaps, start, text) {\n        for (let i = 0; i < text.length; i++) {\n            if (start+i < this.range.start.column+this.maxWidth) {\n                this.insertChar(gaps, {row: this.range.start.row, column: start+i}, text[i]);\n            }\n        }\n    };\n\n    Gap.prototype.getText = function() {\n        return this.editor.session.getTextRange(new Range(this.range.start.row, this.range.start.column,\n                                                this.range.end.row, this.range.start.column+this.textSize));\n\n    };\n\n    return {\n        Constructor: AceGapfillerUi\n    };\n});\n"],"names":["define","$","Range","validChars","AceGapfillerUi","textareaId","w","h","uiParams","this","textArea","document","getElementById","wrapper","focused","activeElement","lang","t","code","gaps","source","ui_source","nextGapIndex","alert","attr","window","ace","require","modelist","enabled","contents_changed","capturingTab","clickInProgress","editNode","css","resize","height","width","editor","edit","get","prop","setReadOnly","setOptions","displayIndentGuides","dragEnabled","enableBasicAutocompletion","newLineMode","$blockScrolling","Infinity","theme","setTheme","setLanguage","setEventHandlers","captureTab","renderer","on","gutter","find","hasClass","addClass","focus","navigateFileEnd","aceLabel","aceTextarea","createGaps","commands","e","cursor","selection","getCursor","commandName","command","name","selectionRange","getSelectionRange","gap","findCursorGap","startsWith","column","range","start","textSize","moveCursorTo","row","end","selectAll","nextGap","index","length","clearSelection","setSelectionRange","isEmpty","char","args","test","insertChar","deleteChar","cursorInGap","deleteRange","insertText","text","preventDefault","stopPropagation","gapToSelect","fail","reload","err","Gap","minWidth","maxWidth","arguments","undefined","session","addMarker","startPosition","insert","prototype","reEscape","s","c","result","i","j","specials","lines","split","sepLeft","sepRight","splitter","RegExp","editorContent","bits","columnPos","values","parseInt","push","repeat","setValue","failed","failMessage","sync","serialisation","empty","value","getText","val","JSON","stringify","syncIntervalSecs","content","parse","language","getSession","mode","findMode","setMode","getElement","bindKeys","Tab","releaseTab","trigger","container","addEventListener","which","keyCode","ctrlKey","altKey","shiftKey","destroy","isFocused","remove","selectionStart","hasFocus","candidate","filename","candidates","nameMap","octave","nodejs","toLowerCase","replace","modesByName","getModeForPath","outerHeight","outerWidth","allowFullScreen","getWidth","changeWidth","delta","other","$onChangeBackMarker","$onChangeFrontMarker","pos","getTextRange","Constructor"],"mappings":"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"}