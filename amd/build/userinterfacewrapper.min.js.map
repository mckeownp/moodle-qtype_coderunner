{"version":3,"file":"userinterfacewrapper.min.js","sources":["../src/userinterfacewrapper.js"],"sourcesContent":["/******************************************************************************\n *\n * This module provides a wrapper for user-interface modules, handling hiding\n * of the textArea that is being replaced by the UI element,\n * resizing of the UI component, and support of such usability functions as\n * ctrl-alt-M to disable/re-enable the entire user interface, including the\n * wrapper.\n *\n * @module coderunner/userinterfacewrapper\n * @copyright  Richard Lobb, 2015, The University of Canterbury\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n *\n * The InterfaceWrapper class is constructed either by Moodle PHP calls of\n * the form\n *\n * $PAGE->requires->js_call_amd($modulename, $functionname, $params)\n *\n * (e.g. from within render.php) or by JavaScript require calls, e.g. from\n * authorform.js when the question author changes UI type.\n *\n * The InterfaceWrapper provides:\n *\n * 1. A constructor InterfaceWrapper(uiname, textareaId) which\n *    hides the given text area, replaces it with a wrapper div (resizable in\n *    height by the user but with width resizing managed by changes in window\n *    width), created an instance of nameInstance as defined in the file\n *    ui_name.js (see below).\n *    params is a record containing the decoded value of\n *\n * 2. A stop() method that destroys the embedded UI and hides the wrapper.\n *\n * 3. A restart() method that shows the wrapper again and re-creates the prior\n *    embedded UI component within it.\n *\n * 4. A loadUi(uiname, params) method that kills any currently running UI element\n *    (if there is one) and (re)loads the specified one. The params parameter\n *    is a record that allows additional parameters to be passed in, such as\n *    those from the question's uiParams field and, in the case of the\n *    Ace UI, the 'lang' (language) that the editor is editing. This data\n *    is supplied by the PHP via the data-params attribute of the answer's\n *    base textarea.\n *\n * 5. Regular checking for any resizing of the wrapper, which are passed on to\n *    the embedded UI element's resize() method.\n *\n * 6. Monitoring of alt-ctrl-M key presses which toggle the visibility of the\n *    wrapper plus UI element and the syncronised textArea by calls to stop()\n *    and restart\n *\n * =========================================================================\n *\n * The embedded user-interface module must be defined in a JavaScript file\n * of the form ui_name.js which must define a class nameInstance with\n * the following functionality:\n *\n * 1. A constructor SomeUiName(textareaId, width, height, params) that\n *    builds an HTML component of the given width and height. textareaId is the\n *    ID of the textArea from which the UI element should obtain its initial\n *    serialisation and to which it should write the serialisation when its save\n *    or destroy methods are called. params is a JavaScript object,\n *    decoded from the JSON uiParams defined by the question plus any\n *    additional data required, such as the 'lang' in the case of Ace.\n *\n * 2. A getElement() method that returns the HTML element that the\n *    InterfaceWrapper is to insert into the document tree.\n *\n * 3. A method failed() that should return true unless the constructor\n *    failed (e.g. because it was not able to de-serialise the text area's\n *    contents). The wrapper will call destroy() on the object if failed()\n *    returns true and abort the use of the UI element. The text area will\n *    have the uiloadfailed class added, which CSS will display in some\n *    error mode (e.g. a red border).\n *\n * 4. A method failMessage() that will be called only when failed() returns\n *    True. It should be a defined CodeRunner language string key.\n *\n * 5. A sync() method that copies the serialised represention of the UI plugin's\n *    data to the related TextArea. This is used when submit is clicked.\n *\n * 6. A destroy() method that should sync the contents to the text area then\n *    destroy any HTML elements or other created content. This method is called\n *    when CTRL-ALT-M is typed by the user to turn off all UI plugins\n *\n * 7. A resize(width, height) method that should resize the entire UI element\n *    to the given dimensions.\n *\n * 8. A hasFocus() method that returns true if the UI element has focus.\n *\n * 9. A syncIntervalSecs() method that returns the time interval between\n *    calls to the sync() method. 0 for no sync calls. The userinterfacewrapper\n *    provides all instances with a generic (base-class) version that returns\n *    the value of a UI parameter sync_interval_secs if given else uses the\n *    UI interface wrapper default (currently 5).\n *\n * 10. An allowFullScreen() method that returns True if the UI supports\n *    use of the full-screen button in the bottom right of the UI wrapper.\n *    Defaults to False if not implemented.\n *\n * 11. A setAllowFullScreen(allow) method that takes a boolean parameter that\n *    allows or disallows the use of full screening. This overrides the setting\n *    from the allowFullScreen() method and is provided to allow parent UIs\n *    such as Scratchpad to override the default settings of a child UI.\n *\n * The return value from the module define is a record with a single field\n * 'Constructor' that references the constructor (e.g. Graph, AceWrapper etc)\n *\n *****************************************************************************/\n\n/**\n * This file is part of Moodle - http:moodle.org/\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more util.details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http:www.gnu.org/licenses/>.\n */\n\n\n\n\n\n\n\ndefine(['core/templates', 'core/notification'], function(Templates, Notification) {\n\n\n    /**\n     * Checks that the textarea is an outer answer element which is where the overall\n     * answer is stored.\n     * That is, something like id_q58:5 answer\n     * rather than something like id_q58:5_answer_answer-code\n     *\n     * @param {string} textareaId - The id for the element containing the text representation of the answer.\n     * @returns {boolean} - Whether or not it's an outer answer element.\n     */\n    function isAnAnswer(textareaId) {\n        const pattern = /^id_q\\d+:\\d+_answer$/;\n        return pattern.test(textareaId);\n    }\n\n\n    /**\n     * Computers the SHA-256 hash for the current answer and compares it to the hash of\n     * the last checked answer.\n     * If they are different, changes the style on the relevant results div to show\n     * that the answer is different from the one that was checked.\n     *\n     * @async\n     * @function compare_with_last_checked\n     * @param {string} textareaId - The id for the element containing the text representation of the answer.\n     * @returns {Promise<string>} A promise that resolves to the SHA-256 hash in hexadecimal format.\n     */\n    async function compare_with_last_checked(textareaId) {\n        if (!textareaId || !isAnAnswer(textareaId)) {\n            return null;\n        }\n        const textArea = document.getElementById(textareaId);\n        const params = textArea.getAttribute('data-params');\n        if (params) {\n            const uiParams = JSON.parse(params);\n            const lastcheckedsha256 = uiParams.lastcheckedsha256; // Will be \"\" if no last answer.\n            const extractcodefromjson = uiParams.extractcodefromjson;\n            var currentanswer = textArea.value;\n            if (extractcodefromjson == \"1\") {\n                // Pull out the actual answer part from the JSON.\n                // Otherwise changes in UI variables, eg, expanded/unexpanded scratchpad\n                // will look like a changed answer.\n                try {\n                    const answerBits = JSON.parse(currentanswer);\n                    if ('answer_code' in answerBits) {\n                        // answer_code is currently the name in onstants::ANSWER_CODE_KEY\n                        currentanswer = answerBits.answer_code;\n                    }\n                    // Otherwise leave the answer as it is.\n                    // It could still be JSON, eg, a graphUI answer\n                    // But the marker will be expecting it\n                    // and it doesn't contain values that\n                    // aren't related to the answer.\n                } catch(error) {\n                        // couldn't decode JSON so it's not JSON...\n                    }\n            }\n\n            // Generate SHA256 of answer\n            const encoder = new TextEncoder();\n            const data = encoder.encode(currentanswer);\n            const hashBuffer = await crypto.subtle.digest(\"SHA-256\", data);\n            const hashArray = Array.from(new Uint8Array(hashBuffer));\n            const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n\n            // Compare with last checked answer\n            if (lastcheckedsha256) {\n                var thisQuestionObject = textArea.closest('[id*=\"question\"]');\n                var thisQuestionId = thisQuestionObject.id;\n                const escapedQuestionId = thisQuestionId.replace(/([:\\\\.#\\[\\],=])/g, '\\\\$1');\n                const areaToFind = '#' + escapedQuestionId + ' .coderunner-test-results';\n                var feedbackArea = document.querySelector(areaToFind);\n                if (feedbackArea) {\n                    const noticeId = textareaId + \"-changed-notice\";\n                    const specificNotice = document.querySelector(`[data-id=\"${CSS.escape(noticeId)}\"]`);\n                    if (hashHex !== lastcheckedsha256) {\n                        if (!specificNotice) {\n                            feedbackArea.classList.add('answer-changed');\n                            const message = document.createElement(\"p\");\n                            message.textContent = \"Results below are for a different answer to your answer above.\";\n                            message.style.color = \"black\";\n                            message.setAttribute(\"data-id\", noticeId);\n                            feedbackArea.parentNode.insertBefore(message, feedbackArea);\n                            }\n                    } else {\n                        // revert back to normal.\n                        feedbackArea.classList.remove('answer-changed');\n                        if (specificNotice) {\n                            specificNotice.remove();\n                        }\n                    }\n                }\n            }\n            return hashHex;\n        }\n    }\n\n    /**\n     * Constructor for a new user interface.\n     * @param {string} uiname The name of the interface element (e.g. ace, graph, etc)\n     * which should be in file ui_ace.js, ui_graph.js etc.\n     * @param {string} textareaId The id of the text area that the UI is to manage.\n     * The text area should have an attribute data-params, which is a\n     * JSON encoded record containing whatever additional parameters might\n     * be needed by the User interface. As a minimum it should contain all\n     * the parameters from the uiparameters field of\n     * the question so that question authors can pass in additional data\n     * such as whether graph edges are bidirectional or not in the case of\n     * the graph UI. Additionally the Ace editor requires a 'lang' field\n     * to specify what language the editor is editing.\n     * When the wrapper has been set up on a text area, the text area\n     * element has a reference, current_ui_wrapper, to the UI wrapper.\n     */\n    function InterfaceWrapper(uiname, textareaId) {\n\n        let t = this; // For use by embedded functions.\n\n        this.GUTTER = 16;  // Size of gutter at base of wrapper Node (pixels)\n        this.DEFAULT_SYNC_INTERVAL_SECS = 5;\n\n        this.uniqueId = Math.random();\n        const PIXELS_PER_ROW = 19;  // For estimating height of textareas.\n        const MAX_GROWN_ROWS = 50;  // Upper limit to artifically grown textarea rows.\n        const MIN_WRAPPER_HEIGHT = 50;\n        this.isFullScreenEnable = null;\n        this.taId = textareaId;  // Why is this different to the way it's stored in UI's\n        this.textareaId = textareaId;\n        this.loadFailId = textareaId + '_loadfailerr';\n        this.textArea = document.getElementById(textareaId);\n        if (this.textArea.current_ui_wrapper) {\n            alert(`JavaScript error: multiple UIs on ${textareaId}!`);\n        }\n        const params = this.textArea.getAttribute('data-params');\n        if (params) {\n            this.uiParams = JSON.parse(params);\n        } else {\n            this.uiParams = {};\n        }\n\n        this.uiParams.lang = this.textArea.getAttribute('data-lang');\n        this.readOnly = this.textArea.readOnly;\n        this.isLoading = false;   // True if we're busy loading a UI element.\n        this.loadFailed = false;  // True if UI failed to initialise properly.\n        this.retries = 0;         // Number of failed attempts to load a UI component.\n\n        let h = this.textArea.clientHeight; // Just a first guess. Will be fine tuned in resize.\n\n        // Grow height if textarea contents warrant.\n        let content_lines = this.textArea.value.split('\\n').length;\n        let rows = this.textArea.rows;\n        if (content_lines > rows) {\n            // Allow reloaded text areas with lots of text to grow bigger, within limits.\n            rows = Math.min(content_lines, MAX_GROWN_ROWS);\n        }\n        h = Math.max(h, rows * PIXELS_PER_ROW, MIN_WRAPPER_HEIGHT);\n        this.textArea.style.height = h + 'px';\n        /**\n         * Construct a hidden empty wrapper div, inserted directly after the\n         * textArea, ready to contain the actual UI.\n         */\n        this.wrapperNode = document.createElement('div');\n        this.wrapperNode.id = `${this.taId}_wrapper`;\n        this.wrapperNode.classList.add('ui_wrapper', 'position-relative');\n        this.wrapperNode.uniqueId = this.uniqueId;\n        this.wrapperNode.style.display = 'none';\n        this.wrapperNode.style.resize = 'vertical';\n        this.wrapperNode.style.overflow = 'hidden';\n        this.wrapperNode.style.minHeight = h + \"px\";\n        this.wrapperNode.style.width = '100%';\n        this.wrapperNode.style.border = '1px solid darkgrey';\n        this.textArea.insertAdjacentElement('afterend', this.wrapperNode);\n\n        this.wLast = 0;  // Record last known width and height. See checkForResize().\n        this.hLast = 0;\n\n\n        /**\n         * Record a reference to this wrapper in the text area\n         * for use by external javascript that needs to interact with the\n         * wrapper, e.g. the multilanguage.js module.\n         */\n        this.textArea.current_ui_wrapper = this;\n\n        /**\n         * Load the UI into the wrapper (aysnchronous).\n         */\n        this.uiInstance = null;  // Defined by loadUi asynchronously\n        this.loadUi(uiname, this.uiParams);  // Load the required UI element\n\n        // Change result so that it is clear if the answer is different from the last checked answer.\n        compare_with_last_checked(textareaId);\n\n        /**\n         * Add event handlers\n         */\n        const resizeObserver = new ResizeObserver(function () {\n            t.checkForResize();\n        });\n        resizeObserver.observe(this.wrapperNode);\n\n\n        window.addEventListener('resize', function() {\n            t.checkForResize();\n        });\n\n        const form = this.textArea.closest('form');\n        if (form) {  // There may not be a form, e.g. when reviewing a submission.\n            form.addEventListener('submit', function() {\n                if (t.uiInstance !== null) {\n                    t.uiInstance.sync();\n                    compare_with_last_checked(t.textareaId);\n                }\n            });\n        }\n\n        document.body.addEventListener('keydown', function keyDown(e) {\n            if (e.key === 'm' && e.ctrlKey && e.altKey) {\n                // Before trying to handle ctrl-alt-m keypresses, make sure the\n                // current instance of the wrapper in the DOM is the same as\n                // when this event handler was created. This might not be\n                // the case when userinterface wrappers are nested.\n                const wrapper = document.getElementById(`${t.taId}_wrapper`);\n                if (!wrapper || wrapper.uniqueId !== t.uniqueId) {\n                    // This wrapper has apparently been killed. Stop listening.\n                    // Should now be garbage collectable, too.\n                    document.removeEventListener('keydown', keyDown);\n                } else if (t.uiInstance !== null || t.loadFailed) {\n                    t.stop();\n                } else {\n                    t.restart();        // Reactivate\n                }\n            }\n\n\n        });\n    }\n\n\n\n\n\n\n\n    /**\n     * Set the value of the allowFullScreen property.\n     * If the value is true, the fullscreen mode will be shown.\n     * If the value is false, the fullscreen will be hidden.\n     *\n     * @param {Boolean} enableFullScreen The value to set.\n     */\n    InterfaceWrapper.prototype.setAllowFullScreen = function(enableFullScreen) {\n        this.isFullScreenEnable = enableFullScreen;\n    };\n\n    /**\n     * Load the specified UI element (which in the case of Ace will need\n     * to know the language, lang, as well - this must be supplied as\n     * a 'lang' attribute of the record params.\n     * When ui is up and running, this.uiInstance will reference it.\n     * To avoid a potential race problem, if this method is already busy\n     * with a load, try again in 200 msecs.\n     * @param {string} uiname The name of the User Interface to be used.\n     * @param {object} params The UI parameters object that passes parameters\n     * to the actual UI object.\n     */\n    InterfaceWrapper.prototype.loadUi = function(uiname, params) {\n        const MAX_RETRIES = 20; // Maximum number of attempts to load the UI.\n        const t = this;\n        const errPart1 = 'Failed to load ';\n        const errPart2 = ' UI component. If this error persists, please report it to the forum on coderunner.org.nz';\n\n        /**\n         * Get the given language string and plug it into the given\n         * div element as its html, plus a 'fallback' message on a separate line.\n         * @param {string} langString The language string specifier for the error message,\n         * to be loaded by AJAX.\n         * @param {object} errorDiv The div object into which the error message\n         * is to be inserted.\n         */\n        function setLoadFailMessage(langString, errorDiv) {\n            require(['core/str'], function(str) {\n                /**\n                 * Get langString text via AJAX\n                 */\n                const s = str.get_string(langString, 'qtype_coderunner');\n                const fallback = str.get_string('ui_fallback', 'qtype_coderunner');\n                Promise.all([s, fallback]).then(function(results) {\n                    const s = results[0];\n                    const fallback = results[1];\n                    errorDiv.innerHTML = s + '<br>' + fallback;\n                });\n            });\n        }\n\n        /**\n         * The default method for a UIs sync_interval_secs method.\n         * Returns the sync_interval_secs parameter if given, else\n         * DEFAULT_SYNC_INTERVAL_SECS.\n         */\n        function syncIntervalSecsBase() {\n            if (params.hasOwnProperty('sync_interval_secs')) {\n                return parseInt(params.sync_interval_secs);\n            } else {\n                return t.DEFAULT_SYNC_INTERVAL_SECS;\n            }\n        }\n\n        if (this.isLoading) {  // Oops, we're loading a UI element already\n            this.retries += 1;\n            if (this.retries > MAX_RETRIES) {\n                alert(errPart1 + uiname + errPart2);\n                this.retries = 0;\n                this.loading = 0;\n            } else {\n                setTimeout(function() {\n                    t.loadUi(uiname, params);\n                }, 200); // Try again in 200 msecs\n            }\n            return;\n        }\n        this.retries = 0;\n        this.params = params;  // Save in case need to restart\n\n        this.stop();  // Kill any active UI first\n        this.uiname = uiname;\n\n        if (this.uiname === '' || this.uiname === 'none' || sessionStorage.getItem('disableUis')) {\n            this.uiInstance = null;\n        } else {\n            this.isLoading = true;\n            require(['qtype_coderunner/ui_' + this.uiname],\n                function(ui) {\n                    const h = t.textArea.clientHeight - t.GUTTER;\n                    const w = t.textArea.clientWidth;\n                    const uiInstance = new ui.Constructor(t.taId, w, h, params);\n                    if (uiInstance.failed()) {\n                        /*\n                         * Constructor failed to load serialisation.\n                         * Set uiloadfailed class on text area.\n                         */\n                        t.loadFailed = true;\n                        t.wrapperNode.style.display = 'none';\n                        t.textArea.style.display = '';\n                        uiInstance.destroy();\n                        t.uiInstance = null;\n                        t.textArea.classList.add('uiloadfailed');\n                        const loadFailDiv = document.createElement('div');\n                        loadFailDiv.id = t.loadFailId;\n                        loadFailDiv.className = 'uiloadfailed';\n                        t.textArea.parentNode.insertBefore(loadFailDiv, t.textArea);\n                        setLoadFailMessage(uiInstance.failMessage(), loadFailDiv);  // Insert error by AJAX\n                    } else {\n                        t.textArea.style.display = 'none';\n                        t.wrapperNode.style.display = '';\n                        let elementToAdd = uiInstance.getElement();\n                        if (elementToAdd && elementToAdd.jquery) { // Check if the UI instance returned a jQuery object.\n                            elementToAdd = elementToAdd[0];\n                        }\n\n                        if (elementToAdd) {\n                            // Some naughty (?) UIs, such as scratchpad UI, return null, and then\n                            // plug themselves into the wrapper asynchronously. [Necessary when using mustache templates].\n                            // So fingers crossed they know what they're doing.\n\n                            t.wrapperNode.appendChild(elementToAdd);\n\n                            // With jQuery, any embedded <script> elements will have been executed.\n                            // But not with pure JavaScript. We have to pull them out and append them to\n                            // the head to trigger their execution.\n                            const scriptNodes = elementToAdd.querySelectorAll('script'); // Find all script tags in the node\n                            scriptNodes.forEach(oldScript => {\n                                const newScript = document.createElement('script');\n                                if (oldScript.src) {\n                                    // External script\n                                    newScript.src = oldScript.src;\n                                } else {\n                                    // Inline script\n                                    newScript.textContent = oldScript.textContent;\n                                }\n                                document.head.appendChild(newScript); // Append to the head (triggers execution)\n                                document.head.removeChild(newScript); // Remove the script again.\n                            });\n                        }\n                        t.uiInstance = uiInstance;\n                        t.loadFailed = false;\n                        t.checkForResize();\n\n\n                        let canDoFullScreen = t.isFullScreenEnable !== null ?\n                            t.isFullScreenEnable : uiInstance.allowFullScreen?.();\n                        if (canDoFullScreen) {\n                            t.initFullScreenToggle(t.taId);\n                        } else {\n                            t.removeFullScreenButton(t.taId);\n                        }\n                        /*\n                        * Set a default syncIntervalSecs method if uiInstance lacks one.\n                        */\n                        let uiInstancePrototype = Object.getPrototypeOf(uiInstance);\n                        uiInstancePrototype.syncIntervalSecs = uiInstancePrototype.syncIntervalSecs || syncIntervalSecsBase;\n                        t.startSyncTimer(uiInstance);\n                        t.startSyncTimerForAnswerWrapper(t.textareaId);\n                    }\n                    t.isLoading = false;\n                });\n        }\n    };\n\n\n    /**\n     * Remove the fullscreen button from the wrapper editor.\n     *\n     * @param {String} fieldId The id of answer field.\n     */\n    InterfaceWrapper.prototype.removeFullScreenButton = function(fieldId) {\n        const wrapperEditor = document.getElementById(`${fieldId}_wrapper`);\n        const screenModeButton = wrapperEditor.parentNode.querySelector('.screen-mode-button');\n        if (screenModeButton) {\n            screenModeButton.remove();\n        }\n    };\n\n    /**\n     * Initialize elements and event listeners for the fullscreen mode.\n     *\n     * @param {String} fieldId The id of answer field.\n     */\n    InterfaceWrapper.prototype.initFullScreenToggle = function(fieldId) {\n        const wrapperEditor = document.getElementById(`${fieldId}_wrapper`);\n        const screenModeButton = wrapperEditor.parentNode.querySelector('.screen-mode-button');\n        if (screenModeButton) {\n            return;\n        }\n\n        Templates.renderForPromise('qtype_coderunner/screenmode_button', {}).then(({html}) => {\n            const screenModeButton = Templates.appendNodeContents(wrapperEditor, html, '')[0];\n            const fullscreenButton = screenModeButton.querySelector('.button-fullscreen');\n            const exitFullscreenButton = screenModeButton.querySelector('.button-exit-fullscreen');\n\n            // When load successfully, show the fullscreen button.\n            fullscreenButton.classList.remove('d-none');\n\n            // Add event listeners to the fullscreen/exit-fullscreen button.\n            fullscreenButton.addEventListener('click', enterFullscreen.bind(this,\n                fullscreenButton, exitFullscreenButton));\n            exitFullscreenButton.addEventListener('click', exitFullscreen.bind(this));\n        });\n\n        /**\n         * Make the editor fullscreen.\n         *\n         * @param {HTMLElement} fullscreenButton The fullscreen button.\n         * @param {HTMLElement} exitFullscreenButton The exit fullscreen button.\n         * @param {Event} e The click event.\n         */\n        function enterFullscreen(fullscreenButton, exitFullscreenButton, e) {\n            let t = this;\n            e.preventDefault();\n            // The editor can stretch out.\n            // So we need to save the original height and width of the editor before going fullscreen.\n            t.wrapperHeight = t.wrapperNode.clientHeight;\n            t.heightEditNode = t.hLast;\n            t.widthEditNode = t.wLast;\n\n            fullscreenButton.classList.add('d-none');\n            // Append exit fullscreen button to the wrapper editor.\n            // So that when in the fullscreen mode, the exit fullscreen button will be in the wrapper editor.\n            wrapperEditor.append(exitFullscreenButton);\n\n            // Handle fullscreen event.\n            wrapperEditor.addEventListener('fullscreenchange', () => {\n                if (document.fullscreenElement === null) {\n                    // When exit fullscreen using ESC key or press exit fullscreen button.\n                    // We need to reset the editor to the original size.\n                    t.uiInstance.resize(t.widthEditNode, t.heightEditNode);\n\n                    // We need to reset the wrapper height to the original height.\n                    // In fullscreen mode, the wrapper height can change by stretching it out.\n                    wrapperEditor.style.height = t.wrapperHeight + 'px';\n\n                    // Add and remove the d-none class to show and hide the buttons.\n                    exitFullscreenButton.classList.add('d-none');\n                    fullscreenButton.classList.remove('d-none');\n                } else {\n                    exitFullscreenButton.classList.remove('d-none');\n                }\n            });\n            wrapperEditor.requestFullscreen().catch(Notification.exception);\n        }\n\n        /**\n         * Exit the fullscreen mode.\n         *\n         * @param {Event} e the click event.\n         */\n        function exitFullscreen(e) {\n            let t = this;\n            e.preventDefault();\n            document.exitFullscreen();\n\n            // Reset the editor to the original size before going fullscreen.\n            wrapperEditor.style.height = t.wrapperHeight + 'px';\n            t.uiInstance.resize(t.widthEditNode, t.heightEditNode);\n        }\n    };\n\n\n    /**\n     * Start a sync timer on the answer wrapper, if it's a real answer text area.\n     * @param {string} textareaId The textareaId for the wrapper.\n     * timer is to be set up.\n     */\n    InterfaceWrapper.prototype.startSyncTimerForAnswerWrapper = function(textareaId) {\n        if (isAnAnswer(textareaId)){\n            this.timer = setInterval(\n                function () {\n                    compare_with_last_checked(textareaId);\n                    },\n                250);  // Every 250 ms.\n            }\n        };\n\n\n\n\n    /**\n     * Start a sync timer on the given uiInstance, unless its time interval is 0.\n     * @param {object} uiInstance The instance of the user interface object whose\n     * timer is to be set up.\n     */\n    InterfaceWrapper.prototype.startSyncTimer = function(uiInstance) {\n        const timeout = uiInstance.syncIntervalSecs();\n        if (timeout) {\n            this.uiInstance.timer = setInterval(function () {\n                uiInstance.sync();\n            }, timeout * 1000);\n        } else {\n            this.uiInstance.time = null;\n        }\n    };\n\n\n    /**\n     * Stop the sync timer on the given uiInstance, if running.\n     * @param {object} uiInstance The instance of the user interface object whose\n     * timer is to be set up.\n     */\n    InterfaceWrapper.prototype.stopSyncTimer = function(uiInstance) {\n        if (uiInstance.timer) {\n            clearTimeout(uiInstance.timer);\n        }\n    };\n\n\n    InterfaceWrapper.prototype.stop = function() {\n        /*\n         * Disable (shutdown) the embedded ui component.\n         * The wrapper remains active for ctrl-alt-M events, but is hidden.\n         */\n        if (this.uiInstance !== null) {\n            this.stopSyncTimer(this.uiInstance);\n            this.textArea.style.display = '';\n            if (this.uiInstance.hasFocus()) {\n                this.textArea.focus();\n                this.textArea.selectionStart = this.textArea.value.length;\n            }\n            this.uiInstance.destroy();\n            this.uiInstance = null;\n            this.wrapperNode.style.display = 'none';\n        }\n        this.loadFailed = false;\n        this.textArea.classList.remove('uiloadfailed'); // Just in case it failed before\n        const elementToRemove = document.getElementById(this.loadFailId);\n        if (elementToRemove) {\n            elementToRemove.parentNode.removeChild(elementToRemove);\n        }\n    };\n\n    /*\n     * Re-enable the ui element (e.g. after alt-ctrl-M). This is\n     * a full re-initialisation of the ui element.\n     */\n    InterfaceWrapper.prototype.restart = function() {\n        if (this.uiInstance === null) {\n            /**\n             * Restart the UI component in the textarea\n             */\n            this.loadUi(this.uiname, this.params);\n        }\n    };\n\n\n    /**\n     * Check for wrapper resize - propagate to ui element.\n     */\n    InterfaceWrapper.prototype.checkForResize = function() {\n        if (this.uiInstance) {\n            const h = this.wrapperNode.clientHeight;\n            const w = this.wrapperNode.clientWidth;\n            const maxWidth = this.wrapperNode.clientWidth;\n            const hAdjusted = h - this.GUTTER;\n            const wAdjusted = Math.min(maxWidth, w);\n            if (hAdjusted != this.hLast || wAdjusted != this.wLast) {\n                this.uiInstance.resize(wAdjusted,  hAdjusted);\n                this.hLast = hAdjusted;\n                this.wLast = wAdjusted;\n            }\n        }\n    };\n\n    /**\n     * The external entry point from the PHP.\n     * @param {string} uiname The name of the User Interface to use e.g. 'ace'\n     * @param {string} textareaId The ID of the textarea to be wrapped.\n     */\n    function newUiWrapper(uiname, textareaId) {\n        if (uiname) {\n            return new InterfaceWrapper(uiname, textareaId);\n        } else {\n            return null;\n        }\n    }\n\n\n    return {\n        newUiWrapper: newUiWrapper,\n        InterfaceWrapper: InterfaceWrapper\n    };\n});\n"],"names":["define","Templates","Notification","isAnAnswer","textareaId","test","async","compare_with_last_checked","textArea","document","getElementById","params","getAttribute","uiParams","JSON","parse","lastcheckedsha256","extractcodefromjson","currentanswer","value","answerBits","answer_code","error","data","TextEncoder","encode","hashBuffer","crypto","subtle","digest","hashHex","Array","from","Uint8Array","map","b","toString","padStart","join","areaToFind","closest","id","replace","feedbackArea","querySelector","noticeId","specificNotice","CSS","escape","classList","add","message","createElement","textContent","style","color","setAttribute","parentNode","insertBefore","remove","InterfaceWrapper","uiname","t","this","GUTTER","DEFAULT_SYNC_INTERVAL_SECS","uniqueId","Math","random","isFullScreenEnable","taId","loadFailId","current_ui_wrapper","alert","lang","readOnly","isLoading","loadFailed","retries","h","clientHeight","content_lines","split","length","rows","min","max","height","wrapperNode","display","resize","overflow","minHeight","width","border","insertAdjacentElement","wLast","hLast","uiInstance","loadUi","ResizeObserver","checkForResize","observe","window","addEventListener","form","sync","body","keyDown","e","key","ctrlKey","altKey","wrapper","stop","restart","removeEventListener","prototype","setAllowFullScreen","enableFullScreen","syncIntervalSecsBase","hasOwnProperty","parseInt","sync_interval_secs","loading","setTimeout","sessionStorage","getItem","require","ui","w","clientWidth","Constructor","failed","destroy","loadFailDiv","className","langString","failMessage","errorDiv","str","s","get_string","fallback","Promise","all","then","results","innerHTML","elementToAdd","getElement","jquery","appendChild","querySelectorAll","forEach","oldScript","newScript","src","head","removeChild","allowFullScreen","initFullScreenToggle","removeFullScreenButton","uiInstancePrototype","Object","getPrototypeOf","syncIntervalSecs","startSyncTimer","startSyncTimerForAnswerWrapper","fieldId","screenModeButton","wrapperEditor","enterFullscreen","fullscreenButton","exitFullscreenButton","preventDefault","wrapperHeight","heightEditNode","widthEditNode","append","fullscreenElement","requestFullscreen","catch","exception","exitFullscreen","renderForPromise","_ref","html","appendNodeContents","bind","timer","setInterval","timeout","time","stopSyncTimer","clearTimeout","hasFocus","focus","selectionStart","elementToRemove","maxWidth","hAdjusted","wAdjusted","newUiWrapper"],"mappings":"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"}